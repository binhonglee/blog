<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Incident Management on BinHong Lee&#39;s Blog</title>
    <link>https://binhong.me/blog/tags/incident-management/</link>
    <description>Recent content in Incident Management on BinHong Lee&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>binhong@binhong.me (BinHong Lee)</managingEditor>
    <webMaster>binhong@binhong.me (BinHong Lee)</webMaster>
    <lastBuildDate>Fri, 14 Nov 2025 00:00:00 -0800</lastBuildDate><atom:link href="https://binhong.me/blog/tags/incident-management/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leaked `FakeIncorrectPassword`</title>
      <link>https://binhong.me/blog/2025-10-31-leaked-fakeincorrectpassword/</link>
      <pubDate>Fri, 31 Oct 2025 00:00:00 -0800</pubDate>
      <author>binhong@binhong.me (BinHong Lee)</author>
      <guid>https://binhong.me/blog/2025-10-31-leaked-fakeincorrectpassword/</guid>
      <description>&lt;p&gt;It was Thanksgiving day and I was mostly chilling at home scrolling Threads while watching YouTube. I then came across this post:&lt;/p&gt;
&lt;div class=&#34;threads_wrapper&#34;&gt;
  &lt;a href=&#34;https://www.threads.net/@justinamphlett/post/DC7O6MHOXaX&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; class=&#34;threads&#34;&gt;
    &lt;p class=&#34;handle&#34;&gt;@justinamphlett&lt;/p&gt;
    &lt;svg class=&#34;logo&#34; aria-label=&#34;Threads&#34; viewBox=&#34;0 0 192 192&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;
      &lt;path d=&#34;M141.537 88.9883C140.71 88.5919 139.87 88.2104 139.019 87.8451C137.537 60.5382 122.616 44.905 97.5619 44.745C97.4484 44.7443 97.3355 44.7443 97.222 44.7443C82.2364 44.7443 69.7731 51.1409 62.102 62.7807L75.881 72.2328C81.6116 63.5383 90.6052 61.6848 97.2286 61.6848C97.3051 61.6848 97.3819 61.6848 97.4576 61.6855C105.707 61.7381 111.932 64.1366 115.961 68.814C118.893 72.2193 120.854 76.925 121.825 82.8638C114.511 81.6207 106.601 81.2385 98.145 81.7233C74.3247 83.0954 59.0111 96.9879 60.0396 116.292C60.5615 126.084 65.4397 134.508 73.775 140.011C80.8224 144.663 89.899 146.938 99.3323 146.423C111.79 145.74 121.563 140.987 128.381 132.296C133.559 125.696 136.834 117.143 138.28 106.366C144.217 109.949 148.617 114.664 151.047 120.332C155.179 129.967 155.42 145.8 142.501 158.708C131.182 170.016 117.576 174.908 97.0135 175.059C74.2042 174.89 56.9538 167.575 45.7381 153.317C35.2355 139.966 29.8077 120.682 29.6052 96C29.8077 71.3178 35.2355 52.0336 45.7381 38.6827C56.9538 24.4249 74.2039 17.11 97.0132 16.9405C119.988 17.1113 137.539 24.4614 149.184 38.788C154.894 45.8136 159.199 54.6488 162.037 64.9503L178.184 60.6422C174.744 47.9622 169.331 37.0357 161.965 27.974C147.036 9.60668 125.202 0.195148 97.0695 0H96.9569C68.8816 0.19447 47.2921 9.6418 32.7883 28.0793C19.8819 44.4864 13.2244 67.3157 13.0007 95.9325L13 96L13.0007 96.0675C13.2244 124.684 19.8819 147.514 32.7883 163.921C47.2921 182.358 68.8816 191.806 96.9569 192H97.0695C122.03 191.827 139.624 185.292 154.118 170.811C173.081 151.866 172.51 128.119 166.26 113.541C161.776 103.087 153.227 94.5962 141.537 88.9883ZM98.4405 129.507C88.0005 130.095 77.1544 125.409 76.6196 115.372C76.2232 107.93 81.9158 99.626 99.0812 98.6368C101.047 98.5234 102.976 98.468 104.871 98.468C111.106 98.468 116.939 99.0737 122.242 100.233C120.264 124.935 108.662 128.946 98.4405 129.507Z&#34; fill=&#34;currentColor&#34;/&gt;
    &lt;/svg&gt;&lt;p class=&#34;description&#34;&gt;
      Found a pretty horrific dark pattern with Instagram. If you try to log in on mobile web, it fails with ‘incorrect password’. I double check… it’s right, it’s just not working. Gave up, installed the app, password is fine. Tried again today just to see… this time I get the following error message. Looks like a translation key is missing and it’s serving me the backend name for it? FakeIncorrectPassword ?? Are you shitting me?
    &lt;/p&gt;&lt;div class=&#34;image&#34;&gt;
      &lt;img src=&#34;https://binhong.me/blog/2025-10-31-leaked-fakeincorrectpassword//blog/468513146_835635298542082_280700232251535875_n_5078384436995653656.jpg&#34; alt=&#34;Post image&#34; loading=&#34;lazy&#34;&gt;
    &lt;/div&gt;&lt;/a&gt;
&lt;/div&gt;
  
&lt;p&gt;I immediately recognized that the screenshot is bad. &lt;code&gt;FakeIncorrectPassword&lt;/code&gt; is an internal error code used when the integrity system thinks you&amp;rsquo;re a bad actor (bot, scraper, credential stuffer etc) and so we would show you an &lt;em&gt;Incorrect Password&lt;/em&gt; error message regardless of whether the password is correct. But as seen in the screenshot, we show the raw &lt;code&gt;FakeIncorrectPassword&lt;/code&gt; string directly instead of the regular &lt;em&gt;Incorrect Password&lt;/em&gt; error.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is part of a series &lt;a href=&#34;https://binhong.me/blog/project-presentation/&#34;&gt;(Project Presentation)&lt;/a&gt; where I share stories of my past projects.&lt;/em&gt;&lt;/p&gt;
        
&lt;a class=&#34;anchor&#34; href=&#34;#notifying-owners&#34;&gt;
    &lt;h2 id=&#34;notifying-owners&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Notifying owners&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;The user noted that this happens on mobile web which means they happened to land on a test group, since a sister team had just started public testing this new UI / flow on mobile web. I tried ringing up the oncall for their team (who also happened to be the owner of the public test) but I saw that they had actually marked themselves out-of-office for the whole weekend through the upcoming Monday. Well, that&amp;rsquo;s not good (also weird that they were off while oncall❓).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://binhong.me/blog/img/fakeincorrectpassword1.png&#34; target=&#34;_blank&#34;&gt;
    
    &lt;figure&gt;
        &lt;img src=&#34;https://binhong.me/blog/2025-10-31-leaked-fakeincorrectpassword//blog/img/fakeincorrectpassword1.png&#34;&gt;
        &lt;figcaption&gt;Comparison between old vs new login screen&lt;/figcaption&gt;
    &lt;/figure&gt;
    
&lt;/a&gt;
&lt;/p&gt;
&lt;a class=&#34;anchor&#34; href=&#34;#investigation&#34;&gt;
    &lt;h2 id=&#34;investigation&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Investigation&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;Anyway, I had a few hours to kill before I needed to leave to join my friends&amp;rsquo; Thanksgiving party. I looked at the time and told myself &lt;em&gt;&amp;ldquo;I have time&amp;rdquo;&lt;/em&gt; so I decided to start debugging it myself. I&amp;rsquo;d worked tangentially with this stuff before so I knew a few other things (like 2FA) that also need special handling should be working as intended. My hunch told me that this was caused by the gap between the Python stack (IG server) throwing some error that wasn&amp;rsquo;t properly consumed by the Hack server stack (that determines the UI). So I searched for &lt;code&gt;FakeIncorrectPassword&lt;/code&gt; in the Python stack and found something like &lt;code&gt;TwoFactorError&lt;/code&gt;. Then, I looked for &lt;code&gt;TwoFactorError&lt;/code&gt; in the Hack stack to see how it works and eventually found the one that didn&amp;rsquo;t handle the case for &lt;code&gt;FakeIncorrectPassword&lt;/code&gt;. Simple enough, I just had to add more stuff (iirc I added a few others as well as the aforementioned &lt;code&gt;FakeIncorrectPassword&lt;/code&gt;) to the existing switch case.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://binhong.me/blog/img/fakeincorrectpassword2.png&#34; target=&#34;_blank&#34;&gt;
    
    &lt;figure&gt;
        &lt;img src=&#34;https://binhong.me/blog/2025-10-31-leaked-fakeincorrectpassword//blog/img/fakeincorrectpassword2.png&#34;&gt;
        &lt;figcaption&gt;Simple diagram to show how the calls relate&lt;/figcaption&gt;
    &lt;/figure&gt;
    
&lt;/a&gt;
&lt;/p&gt;
&lt;a class=&#34;anchor&#34; href=&#34;#testing&#34;&gt;
    &lt;h2 id=&#34;testing&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Testing&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;At first, I tried triggering the &lt;code&gt;FakeIncorrectPassword&lt;/code&gt; error on my devserver to test the fix but I don&amp;rsquo;t really know how most of these things work (having never worked on integrity teams). I eventually figured I could just comment out the integrity system calls and just always force return &lt;code&gt;FakeIncorrectPassword&lt;/code&gt; error. Trigger login and take a screenshot for both before and after the fix. Done! I sent the fix out for review and waited for a bit to make sure everything turned green on CI before leaving for the Thanksgiving party (didn&amp;rsquo;t want to bring my laptop with me since I wasn&amp;rsquo;t actually oncall lol).&lt;/p&gt;
&lt;a class=&#34;anchor&#34; href=&#34;#shipping&#34;&gt;
    &lt;h2 id=&#34;shipping&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Shipping&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;Before heading out, I tagged 2 other oncalls (on top of the OOO oncall) to let them know that I&amp;rsquo;d written the fix and I&amp;rsquo;d let them decide if they wanted to ship it or wait till Monday. One of them saw it and immediately approved + shipped my fix. Monday came around and my change got the attention of a few people from the security team. They eventually filed a post-hoc SEV for this and did an in-depth review on what went wrong in the process that led to the leak of this error message.&lt;/p&gt;
&lt;a class=&#34;anchor&#34; href=&#34;#takeaway&#34;&gt;
    &lt;h2 id=&#34;takeaway&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Takeaway&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;The main culprit here is that most Instagram code lives in a different stack (Python) than where the UI is (Hack) and a lot of the Python code just uses &lt;code&gt;string&lt;/code&gt; everywhere instead of proper enums for something like this, making it really hard to keep track of all the potential edge cases that could be missed. Having some familiarity with both the Python and the Hack stacks made it easier to trace the problem and spot the gap in the error handling logic. The fix itself was straightforward once I found the right place, but getting there required understanding how errors flow between multiple systems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Firefighting Heroes</title>
      <link>https://binhong.me/blog/2025-08-01-firefighting-heroes/</link>
      <pubDate>Fri, 01 Aug 2025 00:00:00 -0800</pubDate>
      <author>binhong@binhong.me (BinHong Lee)</author>
      <guid>https://binhong.me/blog/2025-08-01-firefighting-heroes/</guid>
      <description>&lt;p&gt;We love celebrating heroes in general. So when a hero shows up to save the day, it&amp;rsquo;s only natural that we make sure to recognize their contribution. While it might feel counterintuitive, we should strive to not need heroes entirely instead of hoping that next time when tragedy strikes, a hero will turn up once again. This is not to diminish the value of heroes. They still play a very important role in firefighting and are doing the right thing in an urgent situation. However, &lt;em&gt;in a perfect world&lt;/em&gt;, they shouldn&amp;rsquo;t be necessary at all and we should at least aspire to work towards building a system with that level of reliability.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is part of a series &lt;a href=&#34;https://binhong.me/blog/2025-05-04-the-opinionated-engineer/&#34;&gt;(The Opinionated Engineer)&lt;/a&gt; where I share my strong opinions on engineering practices.&lt;/em&gt;&lt;/p&gt;
        
&lt;a class=&#34;anchor&#34; href=&#34;#bian-que-and-his-brothers&#34;&gt;
    &lt;h2 id=&#34;bian-que-and-his-brothers&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Bian Que and his brothers&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;If you&amp;rsquo;ve never heard of the story about &lt;em&gt;Bian Que and his brothers&lt;/em&gt;, here&amp;rsquo;s a &lt;a href=&#34;https://www.meta.ai/@binhonglee/prompt/iS2XuvsxNDq&#34;&gt;Meta AI summary of it&lt;/a&gt; with all the relevant details:&lt;/p&gt;
&lt;blockquote class=&#34;long_quote&#34;&gt;
    &lt;p&gt;Bian Que was a renowned Chinese physician who lived during the Warring States period (475-221 BCE). According to legend, Bian Que and his two older brothers were all skilled in medicine.&lt;/p&gt;
&lt;p&gt;The story goes that the eldest brother treated illnesses before they became apparent, the second brother treated illnesses when they were still subtle, and Bian Que treated illnesses when they were severe and obvious.&lt;/p&gt;
&lt;p&gt;When people saw Bian Que&amp;rsquo;s dramatic cures, they credited him with great skill. However, Bian Que said that his brothers were actually more skilled because they treated problems before they became serious.&lt;/p&gt;
&lt;p&gt;This story highlights the importance of preventive medicine and early intervention in Chinese medical philosophy.&lt;/p&gt;

&lt;/blockquote&gt;
&lt;p&gt;I mention this because one time when I was complaining about all the fires happening in our org and how I keep getting looped into them to help put them out, my then tech lead cited this story to me (which is a little offensive 😡 but she&amp;rsquo;s not wrong lol). I think in general, this is an accurate depiction of the &lt;strong&gt;misplaced prioritization and recognition&lt;/strong&gt; where we consistently reward &amp;ldquo;heroes&amp;rdquo; solving issues rather than those who worked to prevent fires from happening to begin with simply due to visibility and measurability.&lt;/p&gt;
&lt;a class=&#34;anchor&#34; href=&#34;#automate-whenever-possible&#34;&gt;
    &lt;h2 id=&#34;automate-whenever-possible&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Automate whenever possible&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;I remember once reading a Site Reliability Engineer write (verbatim), &lt;em&gt;&amp;ldquo;my job is to automate myself out of my own job&amp;rdquo;&lt;/em&gt; which I thought was an interesting way to look at things but also an obvious starting point. To do away with the reliance on firefighting heroes, automate the things they do whenever possible. As an example, when something breaks and you find an automated test for that specific breakage, have a system that automatically runs bisect against said test to find the blame commit causing the breakage. Taking it a step further, the system can run all these automated tests every time before release and if anything is broken, bisect to find the blame commit and revert it, then run everything again until there&amp;rsquo;s a good stable version that&amp;rsquo;s ready for release.&lt;/p&gt;
&lt;a class=&#34;anchor&#34; href=&#34;#prevention--cure&#34;&gt;
    &lt;h2 id=&#34;prevention--cure&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Prevention &amp;gt; Cure&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;As the idiom says, &lt;em&gt;&amp;ldquo;prevention is better than cure&amp;rdquo;&lt;/em&gt;. In a previous piece about &lt;a href=&#34;https://binhong.me/blog/2025-05-30-no-blame-sev-culture/#process-over-people&#34;&gt;Process over People&lt;/a&gt;, I&amp;rsquo;ve talked about the focus on building process as a preventative measure. This is a similar point where we should ideally focus more on &lt;strong&gt;preventing&lt;/strong&gt; outages from even happening instead of just putting them out &lt;strong&gt;after&lt;/strong&gt; they&amp;rsquo;re already on fire. The hard part however is - yet again - that the visibility of good prevention work is never as prominent as good firefighting work. There is a two-fold solution to this (where ideally both need to happen). Firstly, if you (or you know someone) are doing important prevention work, ensure people are aware of their work. Secondly, leadership needs to prominently acknowledge the value of such work and reflect it as such in &lt;em&gt;whichever-way-they-usually-do-recognition&lt;/em&gt; and in performance reviews.&lt;/p&gt;
&lt;a class=&#34;anchor&#34; href=&#34;#accountability-on-reliability&#34;&gt;
    &lt;h2 id=&#34;accountability-on-reliability&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Accountability on reliability&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;One of the common pitfalls here is that, once something is shipped, the responsibility to keep it running falls on the team (whoever is on-call at the time of incident) instead of the individual who shipped an &lt;em&gt;incomplete&lt;/em&gt; product. This is something I&amp;rsquo;ve previously touched on &lt;a href=&#34;https://binhong.me/blog/2025-05-30-no-blame-sev-culture/#no-blame--no-responsibility&#34;&gt;here&lt;/a&gt;. If someone is taking credit for the successful launch (and all its underlying &lt;strong&gt;impact&lt;/strong&gt;), they should also be held accountable if the launch causes reliability issues (be it during or shortly after the launch). As to how &lt;em&gt;accountability&lt;/em&gt; looks, it can range anywhere from taking ownership of resolving the issue long term, to being penalized in their performance review cycle for an incomplete launch. There&amp;rsquo;s quite a bit of nuance here depending on factors like the scale of outages, any visible warning signs, how preventable the issue was, etc.&lt;/p&gt;
&lt;a class=&#34;anchor&#34; href=&#34;#wrap-up&#34;&gt;
    &lt;h2 id=&#34;wrap-up&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Wrap up&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;This is as much (if not more) of a culture problem as it is a technical problem. Building reliable systems isn&amp;rsquo;t just about writing better code or implementing more monitoring. It requires fundamentally shifting how we think about and reward engineering work. We need to move away from the hero worship that celebrates last-minute saves and instead build cultures that value the unglamorous work of prevention, automation, and long-term system health. Heroes will always be needed in truly exceptional circumstances, but if your organization consistently relies on them to keep the lights on, it&amp;rsquo;s a sign that your systems, processes, and culture need serious attention. The goal isn&amp;rsquo;t to eliminate heroes entirely but to build systems so robust that heroic interventions become rare exceptions rather than regular occurrences.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Major Incident Runbook</title>
      <link>https://binhong.me/blog/2025-07-25-major-incident-runbook/</link>
      <pubDate>Fri, 25 Jul 2025 00:00:00 -0800</pubDate>
      <author>binhong@binhong.me (BinHong Lee)</author>
      <guid>https://binhong.me/blog/2025-07-25-major-incident-runbook/</guid>
      <description>&lt;p&gt;I wrote a similar version of this internally at Meta a few years ago for my org after finding myself in the middle of a few SEV1s in a row &amp;ndash; and being consulted / asked for support in other similar situations. I thought this might be something useful to share (as a public version) as well. This won&amp;rsquo;t be perfectly fitting for all use cases, but having a runbook works as an anchor in the midst of chaos, helping to get you unstuck from &amp;ldquo;what&amp;rsquo;s next?&amp;rdquo;. Admittedly, this is an incomplete runbook that serves more as a template for your team or company to complete with more specific tooling guides (using &lt;em&gt;which&lt;/em&gt; tool to achieve &lt;em&gt;what&lt;/em&gt;, etc.).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is part of a series &lt;a href=&#34;https://binhong.me/blog/2025-05-04-the-opinionated-engineer/&#34;&gt;(The Opinionated Engineer)&lt;/a&gt; where I share my strong opinions on engineering practices.&lt;/em&gt;&lt;/p&gt;
        
&lt;a class=&#34;anchor&#34; href=&#34;#stop-the-bleed&#34;&gt;
    &lt;h2 id=&#34;stop-the-bleed&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Stop the Bleed!&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;The highest priority is to stop the bleeding immediately. &lt;em&gt;Flip a killswitch, roll back changes, apply server-side fixes, apply client-side fixes&lt;/em&gt; - &lt;strong&gt;in that order&lt;/strong&gt;. A killswitch generally propagates faster, thus is preferred over code changes, but even then, prioritize rolling back changes instead of forward fixing. Forward fixing adds more unknown factors into the mix (because that&amp;rsquo;s more new code which could now cause new / different problems); rolling back, on the other hand, is more predictable. Server-side fixes over client-side fixes should be pretty obvious since you can guarantee the server version (as the service provider), but you can&amp;rsquo;t always force a client to update (native apps), or there could be some caching involved (web).&lt;/p&gt;
&lt;a class=&#34;anchor&#34; href=&#34;#multiple-workstreams&#34;&gt;
    &lt;h2 id=&#34;multiple-workstreams&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Multiple Workstreams&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;During a major incident, there are generally multiple things that can or need to happen in parallel. Break them down into clear workstreams and delegate a domain expert to run each of them. If more things are discovered down the line (or the situation changes), switch up the workstream and get different people (domain experts) involved to run different things. Since you&amp;rsquo;re dealing with an incident (which are usually time sensitive), &lt;strong&gt;never hesitate to call people&lt;/strong&gt;. This needs to be said a lot because people constantly hesitate about false positives or getting on others&amp;rsquo; bad side for inaccurately calling them up. But you won&amp;rsquo;t know what you don&amp;rsquo;t know without getting the domain expert to show up and verify what you&amp;rsquo;re seeing.&lt;/p&gt;
&lt;a class=&#34;anchor&#34; href=&#34;#chat-management&#34;&gt;
    &lt;h2 id=&#34;chat-management&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Chat Management&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;Alongside having separate workstreams, you should also set up separate chat threads for each workstream to keep the &lt;em&gt;main chat&lt;/em&gt; low on noise. That said, make sure to announce the establishment and / or major milestones of each new workstream clearly within the main chat so everyone relevant is correctly included. You might be in a lot of different chats and things will be chaotic, so you will need to take extra care in ensuring that the right people are in the right chat to allow them to get their different tasks going. Everyone should still be in the main chat, but most discussion should happen in the workstream chat.&lt;/p&gt;
&lt;a class=&#34;anchor&#34; href=&#34;#sync-meetings&#34;&gt;
    &lt;h2 id=&#34;sync-meetings&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Sync Meetings&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;There are generally 2 types of sync meetings. First is the &amp;ldquo;everything just happened so we started a meeting to info dump and get everyone up to speed.&amp;rdquo; This meeting will always be chaotic with a lot of people joining to figure out what&amp;rsquo;s happening and what to do next. (There might also be people who only joined out of curiosity, but as long as they aren&amp;rsquo;t interrupting, they are the least of your problems - unless Zoom is not scaling lol.) Set out a clear goal, a set of tasks, and an owner for each of those tasks. Finally, set a follow-up date and time (usually in a few hours) for everyone to regroup with new findings and progress to determine next steps.&lt;/p&gt;
&lt;p&gt;The second type is the follow-up and / or recurring meeting. This will feel more like your regular team standup meeting except with a lot more urgency. It&amp;rsquo;s important to note that if there&amp;rsquo;s any major breakthrough, people shouldn&amp;rsquo;t wait until the next planned meeting time to report (because, well, this is an outage lol) but should instead share it with everyone immediately. This goes back to the previous point about chat management where you (as the incident manager) will need to monitor each workstream chat to catch something like this. After resolving the core issue, there might still be &lt;em&gt;important&lt;/em&gt; cleanup work needed to be handled with a similar level of urgency to prevent the same outage from happening again in a very short time. In these long-running incident cleanups, you might opt to have daily (or even twice-a-day) sync meetings until the cleanup is complete.&lt;/p&gt;
&lt;a class=&#34;anchor&#34; href=&#34;#wrap-up&#34;&gt;
    &lt;h2 id=&#34;wrap-up&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Wrap up&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;As a whole, you will largely be more like a PM / TPM instead of a regular engineer when handling a lot of this &lt;em&gt;alignment&lt;/em&gt; work. If you think someone else is better suited to handle this (another more senior engineer or your manager, etc.), ask for help while you focus on the thing that you do best (likely as the subject matter expert on investigation or remediation). Remember that incident management is a skill that improves with practice - don&amp;rsquo;t expect to be perfect on your first few incidents, even experienced engineers can feel overwhelmed when everything is on fire. Don&amp;rsquo;t forget to acknowledge the team&amp;rsquo;s efforts since major incidents are stressful for everyone involved, and use this runbook as a starting point while adapting it based on your team&amp;rsquo;s specific needs and continuously improving your processes with each incident.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>No Blame SEV (Incident) Culture</title>
      <link>https://binhong.me/blog/2025-05-30-no-blame-sev-culture/</link>
      <pubDate>Fri, 30 May 2025 00:00:00 -0800</pubDate>
      <author>binhong@binhong.me (BinHong Lee)</author>
      <guid>https://binhong.me/blog/2025-05-30-no-blame-sev-culture/</guid>
      <description>&lt;p&gt;Every time there&amp;rsquo;s a major outage at Meta, the first question I get from friends and family is usually &lt;em&gt;&amp;ldquo;did they fire the person who caused it?&amp;rdquo;&lt;/em&gt; which is where I have to explain this concept of &lt;strong&gt;No Blame SEV Culture&lt;/strong&gt;. Especially for an outage so big that a significant number of users are affected, the &lt;em&gt;individual&lt;/em&gt; causing it likely does not have ill intent and there are likely multiple different processes and systems that failed along the way to get us here in the first place.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is part of a series &lt;a href=&#34;https://binhong.me/blog/2025-05-04-the-opinionated-engineer/&#34;&gt;(The Opinionated Engineer)&lt;/a&gt; where I share my strong opinions on engineering practices.&lt;/em&gt;&lt;/p&gt;
        
&lt;a class=&#34;anchor&#34; href=&#34;#process-over-people&#34;&gt;
    &lt;h2 id=&#34;process-over-people&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Process over People&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;When something goes wrong (especially something &lt;em&gt;really catastrophic&lt;/em&gt;), it&amp;rsquo;s usually a combination of both process and people problems. The difference here is that process is more deterministic compared to people. People have off-days, get tired, make mistakes etc. so it&amp;rsquo;s important to have a process (or automated systems) in place to prevent that. This can mean anything from adding more test coverage, lint rules against bad code patterns, and / or more alerts. It is however important to note that they need to &lt;strong&gt;maintain a certain level of quality bar&lt;/strong&gt;. As mentioned in &lt;a href=&#34;https://binhong.me/blog/2025-05-04-push-fearlessly-with-automated-testing/#broken-tests&#34;&gt;the previous article&lt;/a&gt;, flaky / broken tests are tech debt, same goes for noisy lint rules and alerts. Too many noisy lint rules and alerts would lead to engineers disregarding them or adopting a &amp;ldquo;wait-and-see&amp;rdquo; mentality which is not ideal in preventing future outages.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://binhong.me/blog/img/sev_review_trifecta.jpeg&#34; target=&#34;_blank&#34;&gt;
    
    &lt;img src=&#34;https://binhong.me/blog/2025-05-30-no-blame-sev-culture//blog/img/sev_review_trifecta.jpeg&#34;&gt;
    
&lt;/a&gt;
&lt;/p&gt;
&lt;a class=&#34;anchor&#34; href=&#34;#expensive-lesson&#34;&gt;
    &lt;h2 id=&#34;expensive-lesson&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Expensive Lesson&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;One of the more interesting quotes I&amp;rsquo;ve read repeatedly (both within and outside of Meta) about people who caused outages is that they just learned an expensive lesson through that specific outage. Firing them (or letting them go) would mean that your company just paid that expensive price of such a lesson for an employee without actually benefiting from it. This employee will then bring this lesson with them to their next employer who would then benefit from such experience.&lt;/p&gt;
&lt;a class=&#34;anchor&#34; href=&#34;#fear&#34;&gt;
    &lt;h2 id=&#34;fear&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Fear&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;One of the more significant downsides of &lt;em&gt;blame&lt;/em&gt;, is that you now instill fear in making any sort of production changes (even calculated ones). Instead, it&amp;rsquo;s important to keep in mind that as your product / infra grows, so should your process. Having strong fear in taking any responsibility for even attempting to improve or make fundamental changes breeds complacency. This can be fine in certain organizations and products (like government software, health tech etc.) where there&amp;rsquo;s almost no tolerance for any sort of outages. That said, this is where you should have good chaos engineering and fail-safe practices to ensure the resiliency of your system.&lt;/p&gt;
&lt;a class=&#34;anchor&#34; href=&#34;#no-blame--no-responsibility&#34;&gt;
    &lt;h2 id=&#34;no-blame--no-responsibility&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;No Blame ≠ No Responsibility&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;This is a bit of an exception or outlier effect (and likely the most controversial part of this whole piece). Usually when you cause a really major outage (or multiple for that matter), it&amp;rsquo;s really not your fault (or shouldn&amp;rsquo;t be). But sometimes, smaller outages are understandably less &amp;ldquo;well protected&amp;rdquo; because we expect people to still &lt;em&gt;care&lt;/em&gt; about the things they work on. If you &lt;strong&gt;continuously&lt;/strong&gt; cause outages due to &lt;strong&gt;recklessness&lt;/strong&gt; (&amp;ldquo;lack of &lt;em&gt;care&lt;/em&gt;&amp;rdquo;) especially within a short period of time, you should still be held accountable for it. It&amp;rsquo;s especially common when someone chases the topline metrics movement against a tight timeline (end of a performance review cycle). This does not mean that people should be finger-pointing during the incident review, as before, that should be used to focus on what could&amp;rsquo;ve been better instead. However, it should be brought up separately as part of the performance conversation. It&amp;rsquo;s important to note that this is a scenario where a &lt;em&gt;quantitative change leads to a qualitative change&lt;/em&gt; since an increase in quantity (of incidents) leads to a change in narrative thus should not be used to penalize those who&amp;rsquo;ve only caused one (or maybe two) incidents in a given period of time.&lt;/p&gt;
&lt;p&gt;Aside from that, if there isn&amp;rsquo;t any runbook or recovery plan prepared ahead of time (especially for predictable issues - &lt;em&gt;*subjective*&lt;/em&gt;), it demonstrates a lack of good planning and foresight into the feature. This is - frankly - a lack of competence and the project owner should take responsibility for the rather &lt;em&gt;incomplete&lt;/em&gt; launch. However, the reality is that many individuals would launch buggy projects, claim credit for all the good it brings, while oncalls (spread across the team) pay for the lack of implementation quality. This is especially true when they immediately switch teams after project launches and no longer have to maintain or deal with the aftermath of their uninspiring launch.&lt;/p&gt;
&lt;a class=&#34;anchor&#34; href=&#34;#wrap-up&#34;&gt;
    &lt;h2 id=&#34;wrap-up&#34;&gt;
        &lt;span class=&#34;text&#34;&gt;Wrap up&lt;/span&gt;
        &lt;span class=&#34;tag&#34;&gt;#&lt;/span&gt;
    &lt;/h2&gt;
&lt;/a&gt;
&lt;p&gt;No blame culture means that you aren&amp;rsquo;t fully responsible just because you accidentally touched the house of cards causing it to collapse. Instead, we need better protection around it - like building a fence around it, using LEGO blocks instead of cards, etc - to make sure it doesn&amp;rsquo;t break down easily again after someone accidentally touches it, or just prevent people from accidentally touching it altogether. This means we hold those who are responsible for ensuring the protection accountable instead of those who inevitably discovered the problem. It&amp;rsquo;s like how we don&amp;rsquo;t blame white hat hackers for discovering an exploit; we pay them bounties as a way to thank them for discovering them. We should thank those who found holes in our system&amp;rsquo;s reliability instead of penalizing them for finding it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
