<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Devops on BinHong Lee's Blog</title><link>https://binhong.me/blog/tags/devops/</link><description>Recent content in Devops on BinHong Lee's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 07 Aug 2019 00:00:00 -0800</lastBuildDate><atom:link href="https://binhong.me/blog/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Multi-language Support Build Tool</title><link>https://binhong.me/blog/2019-08-07-multi-language-support-build-tool/</link><pubDate>Wed, 07 Aug 2019 00:00:00 -0800</pubDate><guid>https://binhong.me/blog/2019-08-07-multi-language-support-build-tool/</guid><description>&lt;p>I recently started learning about Go to find out what’s all the hype about. So I figured what’s a better way than to build a project out of it? As I was setting up my machine and going through tutorials step-by-step, I was slightly annoyed by the fact that the development of Go projects are limited to inside the &lt;code>$GOPATH&lt;/code>.&lt;/p>
&lt;p>Personally, I have all my side projects stored at the top level of the computer. It might not be the best way to do it but I’m liking that I can see all my projects at one glance. I guess one could argue that you can soft link the folder into the folder inside &lt;code>$GOPATH&lt;/code> and I would pretty much achieve the same effect. But it didn’t quite feel right to me, sounds like a really hacky workaround that might not worth the maintenance cost as I switch to a separate machine only to have to do everything all over again.&lt;/p>
&lt;p>&lt;em>*Note: Yes, I did eventually found out that you can now do development without being in &lt;code>$GOPATH&lt;/code> with &lt;code>go mod&lt;/code>.&lt;/em>&lt;/p>
&lt;p>Instead, I started looking into build tools that can do that. Admittedly, I intentionally picked something that’s not so mainstream (Buck, Bazel, Pants) and found Please. (The other part of me liked the idea of naming my run alias as &lt;code>plz work&lt;/code> because it’s mildly funny.)&lt;/p>
&lt;h2 id="build-tools">Build Tools&lt;/h2>
&lt;p>So what is a build tool and why do we need them? In most occasion of a side project, you build and run each part of your project separately in a package of its own with only one (or two) programming languages each. In which you never needed to cross compile or compile multiple projects at once in parallel. Even when you do, there’s nothing that needs more than a couple lines of shell scripts to string them together since the performance gain through parallel compiling is not that significant if at all.&lt;/p>
&lt;p>However, this does not hold the same for companies that adopt the concept of monorepo. Instead of multiple smaller repositories, they host all of their code (which can be a mix of many different languages and requires many different build flows) in just a single repositories. In this case, different projects can also share the same library that is already imported and in use by the other project thus making sure that the imported library version is always consistent across all the projects.&lt;/p>
&lt;p>Here’s a quick summary of why and why not. I’m not here to debate if you should or should not use a build tool or monorepo. I’ll leave them to the experts. I’m just here to share about the possibility of doing so.&lt;/p>
&lt;p>Advantages:&lt;/p>
&lt;ul>
&lt;li>Multi-language compatibility&lt;/li>
&lt;li>Not limited to any specific path&lt;/li>
&lt;li>Consistently work across supported devices&lt;/li>
&lt;li>Smoother e2e workflow (if set up correctly)&lt;/li>
&lt;/ul>
&lt;p>Disadvantages:&lt;/p>
&lt;ul>
&lt;li>Slightly steeper learning curve&lt;/li>
&lt;li>Can be complicated to set them up&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>There are a few pretty straightforward way to install it according to their &lt;a href="https://please.build/quickstart.html">documentation&lt;/a> though admittedly, you probably shouldn’t just run some random script from some random website online (but then again, compiling from source can be a bit of a pain) so that’s really up to you.&lt;/p>
&lt;p>&lt;em>*Note: You mostly only need this installed to initialize the project. Others wanting to build / develop the project does not necessarily have to have &lt;code>please&lt;/code> installed locally for them. Similar to how Gradle works with &lt;code>./gradlew&lt;/code> on machines without Gradle installed, Please generates a &lt;code>./pleasew&lt;/code> file that can be ran as an alternative if one does not have Please installed in the machine.&lt;/em>&lt;/p>
&lt;h2 id="setup">Setup&lt;/h2>
&lt;h3 id="build-files">BUILD files&lt;/h3>
&lt;p>Honestly the BUILD file syntax for Please looks very much alike (if not identical) to some of the other more popular build tools like Bazel or Buck. I don’t know of the exact name for it but it is very Python-ish. In fact, GitHub linguist’s &lt;code>language.yml&lt;/code> actually explicitly &lt;a href="https://github.com/github/linguist/blob/master/lib/linguist/languages.yml#L4001-L4003">classifies them as Python&lt;/a>. I recommend checking out &lt;a href="https://please.build/lexicon.html">the documentation&lt;/a> as they are pretty good in detailing the available fields and their purpose for it.&lt;/p>
&lt;h3 id="external-dependencies">External Dependencies&lt;/h3>
&lt;p>This is probably the most tedious part of the whole process. It makes you realize how much have you’ve taken tools like &lt;code>dep&lt;/code> or even &lt;code>npm&lt;/code> and &lt;code>yarn&lt;/code> for granted. Unlike those other tools I’ve mentioned, you’ll have to manually list each and every one of the external dependencies (and their dependencies) properly so Please knows which to prioritize and how to build and manage them in the most efficient parallel way. Fortunately, this should be a one time thing as even if you consistently increase dependencies, chances are you already have the dependencies of the new dependencies listed.&lt;/p>
&lt;h2 id="code-structure">Code Structure&lt;/h2>
&lt;p>You have a lot of freedom here. While you might not want to go crazy and have your code all over the place (making them referencing each other a nightmare), you can afford to structure them slightly different from the conventional way since the build tool will handle the hierarchical setup for you. For instance, you can have your main go file 2 levels (or more) inside some folder unlike the usual top level requirements. Similarly, if you need some folders of multiple different programming languages to overlap in between each other, that’s pretty possible (though I would question the need for it and if there’s a rational reasoning behind it).&lt;/p>
&lt;hr>
&lt;h2 id="pleasings">pleasings&lt;/h2>
&lt;p>Aside from the built-in supported languages and rules, they also have an additional repository that is home to the rules that are not actively maintained / updated thus not being part of the core functionality / rule. These includes support for things like Android, Rust, Scala, Kotlin and even Nim (okay, I wrote the one for Nim so I’m just shamelessly sneaking it in here).&lt;/p>
&lt;h2 id="genrule--gentest">genrule() / gentest()&lt;/h2>
&lt;p>Even with pleasings, there’s a possibility where there’s something you work on (or need for your project) that is not supported. In my project, I’m also compiling Vue.js code for the web. In this case, I used a genrule() to build it with pnpm (similar to npm and yarn) and a gentest() to run its tests. While it’s pretty straightforward to do it this way, I’ve also effectively reduced the benefits of using a build tool since I’m mostly waiting on this one rule (and rely on pnpm’s build efficiency instead of Please’s) when building my entire project. Here is an example how I did mine:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-py" data-lang="py">genrule(
name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;pnpm&amp;#39;&lt;/span>,
visibility &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;PUBLIC&amp;#39;&lt;/span>],
outs &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;node_modules&amp;#39;&lt;/span>],
cmd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39; &amp;amp;&amp;amp; &amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join([
&lt;span style="color:#e6db74">&amp;#34;top_level=$(pwd | awk -F&amp;#39;plz-out&amp;#39; &amp;#39;{print $1}&amp;#39;)&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;pnpm i&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;ln -s &lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">$top_level&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">node_modules&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">node_modules&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,
]),
)
genrule(
name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;build&amp;#39;&lt;/span>,
outs &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;dist&amp;#39;&lt;/span>],
cmd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39; &amp;amp;&amp;amp; &amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join([
&lt;span style="color:#e6db74">&amp;#34;current=$(pwd)&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;cd $(pwd | awk -F&amp;#39;plz-out&amp;#39; &amp;#39;{print $1}&amp;#39;)&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;pnpm run build&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;mv &lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">dist&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">$current&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
]),
deps &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;:pnpm&amp;#39;&lt;/span>],
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>*Note: Please do have &lt;a href="https://github.com/thought-machine/pleasings/tree/master/js">some support for JavaScript&lt;/a> in the &lt;code>pleasings&lt;/code> repository in which you can use their &lt;code>yarn_library()&lt;/code> and &lt;code>js_binary()&lt;/code>. However due to the nature of node.js dependency hell nowadays, handwriting the &lt;code>yarn_library()&lt;/code> rules for all the libraries you want + all the libraries those libraries depends on and so forth will probably take forever. I also did not look too deep into this to tell if this would work any differently from just running &lt;code>yarn install&lt;/code> just by itself.&lt;/p>
&lt;hr>
&lt;h2 id="ci-testing">CI Testing&lt;/h2>
&lt;p>One of the other benefit of having a build tool properly set up is that it would be slightly easier (and more consistent) to set up your CI testing both in terms of testing environment and testing outcome. Of course, there are still some external dependencies like language version installed etc but for the most part, build tools would always pull fresh version of the new build regardless if there is a cached version on the machine (that might mess with the consistency of the test result).&lt;/p>
&lt;h2 id="vscode">VSCode&lt;/h2>
&lt;p>For most code editors, their linter will rely on the env value of &lt;code>$GOPATH&lt;/code> to look for third party libraries used in your go codes. Since those libraries don’t live in there when building with Please (it is in the &lt;code>plz-out&lt;/code> folder inside your project folder), you will want to have a &lt;code>settings.json&lt;/code> file that points the linter to the right location consisting of the compiled libraries. Something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;go.inferGopath&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;go.gopath&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;{workplaceFolder}/plz-out/go:/{workplaceFolder}/plz-out/go/src&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;files.watcherExclude&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;**/plz-out/**&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>*Note: you will want to replace &lt;code>{workplaceFolder}&lt;/code> with an absolute path to wherever your project lives since the linter seems to complain about using a relative path as &lt;code>$GOPATH&lt;/code>.&lt;/em>&lt;/p>
&lt;hr>
&lt;p>Hopefully this has been helpful in opening you up to trying and mixing different programming languages into your project. Why? To me, side projects are just experimental grounds for fun. If it sounds interesting enough, I’ll try and make it happen (or in this case, see if someone has done it and use their ready build tool).&lt;/p>
&lt;p>If you are interested, &lt;a href="https://github.com/binhonglee/GlobeTrotte/">this&lt;/a> is the side project I’ve been working on. Thus far, its still not functional. It will most likely take another few months or so (depending on my progress and how much free time I have committed to this outside of work) before I can deploy a minimally working version of it.&lt;/p>
&lt;hr>
&lt;h2 id="about-me">About me&lt;/h2>
&lt;p>I currently work at Facebook as a Software Engineer. I spend some of my free time experimenting and building new things with technologies I find fun and interesting. Follow my exploration journey &lt;a href="https://binhong.me/blog">here&lt;/a> or on &lt;a href="https://github.com/binhonglee">GitHub&lt;/a>.&lt;/p></description></item><item><title>How to host multiple domain names and projects on one server</title><link>https://binhong.me/blog/2018-08-29-how-to-host-multiple-domain-names-and-projects-on-one-server/</link><pubDate>Wed, 29 Aug 2018 00:00:00 -0800</pubDate><guid>https://binhong.me/blog/2018-08-29-how-to-host-multiple-domain-names-and-projects-on-one-server/</guid><description>&lt;p>I own multiple domain names, and each one hosts a different side project. For the longest time, everything that required ‘hosting’ was hosted on Heroku. But their free tier can be quite limited, it can also get costly quickly if you are paying for each separate project. So instead, I decided to explore putting all of them together using NGINX (recommended to me by &lt;a href="https://jmw.fyi">Jane Manchun Wong&lt;/a>).&lt;/p>
&lt;h2 id="required-resources">Required Resources&lt;/h2>
&lt;h4 id="virtual-private-server-vps">Virtual Private Server (VPS)&lt;/h4>
&lt;p>You’ll need a virtual server such as DigitalOcean or EC2 by AWS. Personally I uses &lt;a href="https://www.vultr.com/?ref=7358373">Vultr&lt;/a> (here’s the &lt;a href="http://vultr.com/">non-referral link&lt;/a>) which costs me about $2.50 / month.&lt;/p>
&lt;h4 id="domain-names">Domain Names&lt;/h4>
&lt;p>You will need to register a few domain names. Assuming that you probably already have them, make sure your domain names are pointing at the name servers of your VPS. There should be a DNS section in your domain name service dashboard where you can select “custom DNS” or something similar. If you are not sure what the nameservers of your VPS are, you should be able to find that info easily through a simple search of “nameserver” + VPS service name.&lt;/p>
&lt;h2 id="setting-up-nginx">Setting up NGINX&lt;/h2>
&lt;h4 id="installation-and-basic-setup">Installation and basic setup&lt;/h4>
&lt;p>&lt;em>Reference from &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-16-04">How To Install Nginx on Ubuntu 16.04&lt;/a>&lt;/em>&lt;/p>
&lt;p>Run the following commands through SSH-ing into the VPS. It will install NGINX, set firewall rules allowing it, and set NGINX to autostart on boot.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">sudo apt-get update
sudo apt-get install nginx
sudo ufw allow &lt;span style="color:#e6db74">&amp;#39;Nginx HTTP&amp;#39;&lt;/span>
sudo systemctl enable nginx
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="configuration-setup">Configuration setup&lt;/h4>
&lt;p>&lt;em>Reference from &lt;a href="https://geekflare.com/multiple-domains-on-one-server-with-apache-nginx/">Host Multiple Domains on One Server/IP with Apache or nginx&lt;/a>&lt;/em>&lt;/p>
&lt;p>The default virtual.conf location should be at /etc/nginx/conf.d/virtual.conf. I recommend backing up the default file before making any changes. (If it doesn’t exist, you can just create it.) Edit the file to look something like the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="color:#66d9ef">server&lt;/span> {
&lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span>;
&lt;span style="color:#f92672">root&lt;/span> &lt;span style="color:#e6db74">/opt/htdocs/binhong&lt;/span>;
&lt;span style="color:#f92672">index&lt;/span> &lt;span style="color:#e6db74">index.html&lt;/span> &lt;span style="color:#e6db74">index.htm&lt;/span>;
&lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">binhong.me&lt;/span>;
&lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/&lt;/span> {
&lt;span style="color:#f92672">try_files&lt;/span> $uri $uri/ =&lt;span style="color:#ae81ff">404&lt;/span>;
}
}
&lt;span style="color:#66d9ef">server&lt;/span> {
&lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span>;
&lt;span style="color:#f92672">root&lt;/span> &lt;span style="color:#e6db74">/opt/htdocs/breakups&lt;/span>;
&lt;span style="color:#f92672">index&lt;/span> &lt;span style="color:#e6db74">index.html&lt;/span> &lt;span style="color:#e6db74">index.htm&lt;/span>;
&lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">breakups.life&lt;/span>;
&lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/&lt;/span> {
&lt;span style="color:#f92672">try_files&lt;/span> $uri $uri/ =&lt;span style="color:#ae81ff">404&lt;/span>;
}
}
&lt;span style="color:#66d9ef">server&lt;/span> {
&lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span>;
&lt;span style="color:#f92672">root&lt;/span> &lt;span style="color:#e6db74">/opt/htdocs/breakupsAPI&lt;/span>;
&lt;span style="color:#f92672">index&lt;/span> &lt;span style="color:#e6db74">index.html&lt;/span> &lt;span style="color:#e6db74">index.htm&lt;/span>;
&lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">api.breakups.life&lt;/span>;
&lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/&lt;/span> {
&lt;span style="color:#f92672">proxy_redirect&lt;/span> &lt;span style="color:#e6db74">http://127.0.0.1:8080/&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here are a few things to look at:&lt;/p>
&lt;ul>
&lt;li>&lt;em>server&lt;/em> block — Each of these should represent each different domain or subdomain in use.&lt;/li>
&lt;li>&lt;em>root&lt;/em> — This is the location where the (HTML) files are loaded from.&lt;/li>
&lt;li>&lt;em>server_name&lt;/em> — (sub)domain name(s) that should load these specific files.&lt;/li>
&lt;li>&lt;em>proxy_redirect&lt;/em> — in cases where you are redirecting a specific subdomain to an active server, you will want to add this and put the IP location after it. (For local servers, either &lt;em>http://127.0.0.1:port&lt;/em> or &lt;em>http://localhost:port&lt;/em> should work as intended.)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">sudo systemctl restart nginx
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After you are done, restart the server so the new configurations will be loaded and applied.&lt;/p>
&lt;h2 id="cloning-and-linking">Cloning and linking&lt;/h2>
&lt;p>Now remember, since you have your directory pointing at /opt/htdocs/&lt;em>websiteName&lt;/em>, your initial thought might be to clone your projects into these folders. This can work, but it’s not ideal since many operations in these folders require root access to really do anything.&lt;/p>
&lt;p>Instead, you can clone them into your user folder or anywhere else like you normally would, and then create a soft link to connect the path to your repository folder. Something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git clone git@github.com:binhonglee/binhonglee.github.io ~/website
sudo ln -s ~/website /opt/htdocs/binhong
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Of course, when you are cloning a Node.js static site folder (ReactJS, Angular or Vue.js), you will want to install (&lt;code>npm install&lt;/code>) and build (&lt;code>npm run-script build&lt;/code>) them. Then link the &lt;em>./build&lt;/em> folder instead of the base level of the cloned repository. (Similarly for Jekyll sites, but use the &lt;em>./_output&lt;/em> folder instead.) As for active servers, just make sure your server is running on the same port as it is listed in the configuration file.&lt;/p>
&lt;h2 id="set-up-https-with-certbot">Set up HTTPS with certbot&lt;/h2>
&lt;p>Thanks to Let’s Encrypt, you can now get free and easy HTTPS certificates. With the introduction of certbot, everything just got even easier!&lt;/p>
&lt;p>&lt;em>Reference from &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04">How To Secure Nginx with Let’s Encrypt on Ubuntu 16.04&lt;/a>&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">sudo add-apt-repository ppa:certbot/certbot
sudo apt-get update
sudo apt-get install python-certbot-nginx
sudo certbot --nginx -d binhong.me -d www.binhong.me -d api.breakups.life -d breakups.life -d www.breakups.life
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Just run the above for all your domain and subdomain names and certbot will take care of everything. If you were to renew the certs, you can run the following so the certbot will help you renew your SSL certificate.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">sudo certbot renew --dry-run
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="updating-everything">Updating everything&lt;/h2>
&lt;p>Now that you have everything up and running, you might be thinking, well there seems to be an awful lot to remember if/when I need to update something. Unfortunately, that’s kinda true, but we can always make it easier by adding a script that does it for us.&lt;/p>
&lt;p>Here is how one would look:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># Update SSL certificates&lt;/span>
sudo certbot renew
killall screen
&lt;span style="color:#75715e"># normal html websites&lt;/span>
cd websiteSource
git pull
cd ../
&lt;span style="color:#75715e"># node.js static site&lt;/span>
cd nodeProjectFolder
git pull
npm install
npm run-script build
cd ../
&lt;span style="color:#75715e"># ruby jekyll site&lt;/span>
cd jekyllFolder
git pull
bundle install
bundle exec jekyll build
cd ../
&lt;span style="color:#75715e"># node.js server&lt;/span>
&lt;span style="color:#75715e"># make sure to stop the existing session before going ahead to start a new one&lt;/span>
cd nodeServer
git pull
screen -dmS nodeServer
npm install
screen -S nodeServer -X stuff &lt;span style="color:#e6db74">&amp;#34;cd ~/nodeServer
&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
screen -S nodeServer -X stuff &lt;span style="color:#e6db74">&amp;#34;npm start
&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
cd ../
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Thanks for reading! Let me know if you have any questions in the comments below.&lt;/p>
&lt;h2 id="about-me">About me&lt;/h2>
&lt;p>At the time of writing, I work at Apple Inc. in the role of Siri Language Engineer as an Independent Contractor through AdvantisGlobal. I spend a lot of my free time experimenting and building new things with technologies I find fun and interesting. Follow my exploration journey &lt;a href="https://binhong.me/blog">here&lt;/a> or on &lt;a href="https://github.com/binhonglee">GitHub&lt;/a>.&lt;/p>
&lt;hr>
&lt;h2 id="other-references">Other References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://serverfault.com/questions/363159/nginx-proxy-pass-redirects-ignore-port">nginx proxy pass redirects ignore port&lt;/a> on &lt;a href="https://serverfault.com/">serverfault&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://superuser.com/questions/632205/continue-ssh-background-task-jobs-when-closing-ssh">Continue SSH background task/jobs when closing SSH&lt;/a> on &lt;a href="https://superuser.com/">superuser&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;em>This article was originally published on &lt;a href="https://medium.freecodecamp.org/how-you-can-host-multiple-domain-names-and-projects-in-one-vps-7aed4f56e7a1">freeCodeCamp Medium&lt;/a>.&lt;/em>&lt;/p>
&lt;/blockquote></description></item><item><title>Hosting your own Git server with Gitea</title><link>https://binhong.me/blog/2018-08-20-hosting-your-own-git-server-with-gitea/</link><pubDate>Mon, 20 Aug 2018 00:00:00 -0800</pubDate><guid>https://binhong.me/blog/2018-08-20-hosting-your-own-git-server-with-gitea/</guid><description>&lt;p>Most people (including myself) host their personal projects on a third-party free Git hosting websites like GitHub, GitLab, Bitbucket etc. While that is sufficient for most people, it is also pretty fun to have your own Git service hosted on your own domain name of choice. While I trust my fellow engineers at these companies, I am using this as a personally backup to those services if anything goes wrong (&lt;a href="https://about.gitlab.com/2017/02/01/gitlab-dot-com-database-incident/">like GitLab&lt;/a>. Though to their credit, they were able to &lt;a href="https://about.gitlab.com/2017/02/10/postmortem-of-database-outage-of-january-31/">recover most of it&lt;/a>).&lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;p>There really isn&amp;rsquo;t much requirements except for a working machine and a proper working network. Preferably, you would be hosting this on a Virtual Private Server (DigitalOcean, Vultr, Linode etc.). However, you can also mess around with it on your own machine (it takes and requires very little resources by itself) or even host it at home on a Raspberry Pi!&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>&lt;em>Referenced from &lt;a href="https://docs.gitea.io/en-us/install-from-binary/">Gitea&amp;rsquo;s own documentation&lt;/a>&lt;/em>&lt;/p>
&lt;p>While there is a Gitea package in Debian&amp;rsquo;s contrib (which most popular Linux OS such as Ubuntu and Mint based itself on), it doesn&amp;rsquo;t seem it was maintained by the Gitea folks themselves so I wouldn&amp;rsquo;t advice using it. Instead, the instructions below will provide an easy way to just download and run it with binary.&lt;/p>
&lt;h2 id="database">Database&lt;/h2>
&lt;p>You&amp;rsquo;ll need a database to maintain all the information of user accounts and such. Gitea comes with support for SQLite, MySQL and PostgreSQL out of the box so you can pick either of those that you are familiar with to go with. Personally I picked PostgreSQL as I&amp;rsquo;ve always wanted to learn how to mess with one.
In your choice of database, you should create a user (preferably only specifically for the use of Gitea) and a database for Gitea. You will need to fill out these credentials later when setting up Gitea.&lt;/p>
&lt;h2 id="gitea">Gitea&lt;/h2>
&lt;p>As Gitea calls itself &amp;lsquo;a painless self-hosted Git service&amp;rsquo;, the setup is indeed very straightforward. Simply download and run it depending on they way you want to do it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">wget -O gitea https://dl.gitea.io/gitea/1.5.0/gitea-1.5.0-linux-amd64
chmod +x gitea
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Optionally&lt;/em>, you can also verify the GPG signature of the downloaded file with Gitea&amp;rsquo;s &lt;a href="https://pgp.mit.edu/pks/lookup?op=vindex&amp;amp;fingerprint=on&amp;amp;search=0x2D9AE806EC1592E2">GPG key&lt;/a> for security purposes before running it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">gpg --keyserver pgp.mit.edu --recv 0x2D9AE806EC1592E2
gpg --verify gitea-1.5.0-linux-amd64.asc gitea-1.5.0-linux-amd64
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To run Gitea, it is as simple as the following…&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">./gitea web
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default, it will be running on port::3000 of the device IP (http://localhost:3000/). In case you prefer running Gitea from source, they also have &lt;a href="https://docs.gitea.io/en-us/install-from-source/">specific documentations&lt;/a> for that. I had a lot of troubles trying to set it up myself so YMMV.&lt;/p>
&lt;h2 id="load-balancer-optional">Load Balancer (Optional)&lt;/h2>
&lt;p>&lt;em>Referenced from &lt;a href="https://docs.gitea.io/en-us/reverse-proxies/">Gitea&amp;rsquo;s own documentation&lt;/a>&lt;/em>&lt;/p>
&lt;p>If you are running this on a remote server (especially if you are also hosting a bunch of other stuffs), you will need to use a load balance (like Apache HTTPD or NGINX) to forward a specific domain to the port. Append your configuration file with the following as you see fit.&lt;/p>
&lt;h4 id="apache-httpd">Apache HTTPD&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-apache" data-lang="apache">&lt;span style="color:#f92672">&amp;lt;VirtualHost&lt;/span> &lt;span style="color:#e6db74">*:80&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
ProxyPreserveHost &lt;span style="color:#66d9ef">On&lt;/span>
ProxyRequests &lt;span style="color:#66d9ef">off&lt;/span>
ProxyPass / http://localhost:3000/
ProxyPassReverse / http://localhost:3000/
&lt;span style="color:#f92672">&amp;lt;/VirtualHost&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="nginx">NGINX&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="color:#66d9ef">server&lt;/span> {
&lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span>;
&lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">git.example.com&lt;/span>;
&lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/&lt;/span> {
&lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">http://localhost:3000&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="configuration">Configuration&lt;/h2>
&lt;p>Open your browser and navigate to the wherever Gitea was hosted. In there, you will be filling out the database settings as you have configured above (for PostgreSQL, it should be on &lt;code>127.0.0.1:5432&lt;/code>, not sure about the others).&lt;/p>
&lt;p>Few things to look out for:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Domain / Application URL&lt;/code> - This is important to be set up properly as they are used for SSH and HTTPS connection when it comes to cloning and pushing.&lt;/li>
&lt;li>&lt;code>Disable Self-registration&lt;/code> - Considering that you are probably setting this up only for your own use, you should select this option so random people wouldn&amp;rsquo;t just sign up and host projects on your server.&lt;/li>
&lt;li>&lt;code>Admin username and password&lt;/code> - Since you have disabled self registration, you should then set this up in here and use it as your primary account. If you are concerned about security, you can also use the admin account to setup a day-to-day use account so in case the day-to-day account is compromised, you still retain full control of the server through your admin account.&lt;/li>
&lt;/ul>
&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>For the most part, I&amp;rsquo;m using this as a backup to my projects hosted on GitHub and GitLab (project pages is an amazing feature) so ideally, I am mirroring most (if not all) of my projects. As part of being a mirrored repository, Gitea will periodically check the source repository for updates so you don&amp;rsquo;t have to manually sync them. That said, I have quite a few projects that I moved away from mirroring and I&amp;rsquo;ll talk about why below.&lt;/p>
&lt;h2 id="maintenance">Maintenance&lt;/h2>
&lt;p>In case where your VPS (or Raspberry Pi) might restart constantly or so, it might be a chore to always manually start the service every time it is restarted. You should then consider configuring Gitea to run as a service (&lt;a href="https://docs.gitea.io/en-us/linux-service/">Ubuntu&lt;/a>, &lt;a href="https://docs.gitea.io/en-us/windows-service/">Windows&lt;/a>).&lt;/p>
&lt;hr>
&lt;h2 id="droneio">Drone.io&lt;/h2>
&lt;p>When talking about the topic of Git, its hard to stay away from CI. It is such a great idea of automation that saves so much pain and problem especially if it is a huge project that takes a lot of resources and hard to run the tests locally. Here, I&amp;rsquo;ll talk about &lt;a href="https://drone.io">drone.io&lt;/a> which can also be self-hosted along with your Gitea server.&lt;/p>
&lt;h2 id="requirements-1">Requirements&lt;/h2>
&lt;p>You will need to have &lt;a href="https://www.docker.com/">docker&lt;/a> installed in your machine as drone as a whole relies quite a bit on docker to work. The machine where drone is hosted will also require quite a bit of memory and processing power as running CI can be quite a chore for servers.&lt;/p>
&lt;h2 id="installation-1">Installation&lt;/h2>
&lt;p>&lt;em>Referenced from &lt;a href="http://docs.drone.io/installation/">drone&amp;rsquo;s own documentation&lt;/a>&lt;/em>&lt;/p>
&lt;p>First, get the docker image for drone.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">docker pull drone/drone:0.8
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, create a file named &lt;code>docker-compose.yaml&lt;/code> and fill in the following.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;2&amp;#39;&lt;/span>
&lt;span style="color:#f92672">services&lt;/span>:
&lt;span style="color:#f92672">drone-server&lt;/span>:
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">drone/drone:0.8&lt;/span>
&lt;span style="color:#f92672">ports&lt;/span>:
- &lt;span style="color:#ae81ff">8000&lt;/span>:&lt;span style="color:#ae81ff">8000&lt;/span>
- &lt;span style="color:#ae81ff">9000&lt;/span>:&lt;span style="color:#ae81ff">9000&lt;/span>
&lt;span style="color:#f92672">volumes&lt;/span>:
- &lt;span style="color:#ae81ff">/var/lib/drone:/var/lib/drone/&lt;/span>
&lt;span style="color:#f92672">restart&lt;/span>: &lt;span style="color:#ae81ff">always&lt;/span>
&lt;span style="color:#f92672">environment&lt;/span>:
- &lt;span style="color:#ae81ff">DRONE_OPEN=true&lt;/span>
- &lt;span style="color:#ae81ff">DRONE_HOST=http://drone.example.com&lt;/span>
- &lt;span style="color:#ae81ff">DRONE_GITEA=true&lt;/span>
- &lt;span style="color:#ae81ff">DRONE_GITEA_URL=http://git.example.com&lt;/span>
- &lt;span style="color:#ae81ff">DRONE_SECRET=${DRONE_SECRET}&lt;/span>
&lt;span style="color:#f92672">drone-agent&lt;/span>:
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">drone/agent:0.8&lt;/span>
&lt;span style="color:#f92672">command&lt;/span>: &lt;span style="color:#ae81ff">agent&lt;/span>
&lt;span style="color:#f92672">restart&lt;/span>: &lt;span style="color:#ae81ff">always&lt;/span>
&lt;span style="color:#f92672">depends_on&lt;/span>:
- &lt;span style="color:#ae81ff">drone-server&lt;/span>
&lt;span style="color:#f92672">volumes&lt;/span>:
- &lt;span style="color:#ae81ff">/var/run/docker.sock:/var/run/docker.sock&lt;/span>
&lt;span style="color:#f92672">environment&lt;/span>:
- &lt;span style="color:#ae81ff">DRONE_SERVER=drone-server:9000&lt;/span>
- &lt;span style="color:#ae81ff">DRONE_SECRET=${DRONE_SECRET}&lt;/span>
- &lt;span style="color:#ae81ff">DRONE_DATABASE_DRIVER:postgres&lt;/span>
- &lt;span style="color:#ae81ff">DRONE_DATABASE_DATASOURCE:postgres://root:password@1.2.3.4:5432/postgres?sslmode=disable&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Few things to keep in mind in the file above:&lt;/p>
&lt;ul>
&lt;li>&lt;code>DRONE_SECRET&lt;/code> - This is a secret string of your choice used for authentication purpose.&lt;/li>
&lt;li>&lt;code>DRONE_HOST&lt;/code> - URL where this drone server is hosted.&lt;/li>
&lt;li>&lt;code>DRONE_GITEA_URL&lt;/code> - Link to your Gitea server location (it can also be &lt;code>http://localhost:3000/&lt;/code> link)&lt;/li>
&lt;li>&lt;code>DRONE_DATABASE_DRIVER&lt;/code> - Database setup is &lt;strong>optional&lt;/strong>. In their &lt;a href="http://docs.drone.io/database-settings/">documentation&lt;/a>, they mention the setup process of MySQL and PostgreSQL. Though do note that their documentation doesn&amp;rsquo;t seems to be accurate at least &lt;a href="https://github.com/drone/docs/pull/360">from my experience&lt;/a> setting it up.&lt;/li>
&lt;/ul>
&lt;p>In the same directory run the following and drone will be running on &lt;code>http://localhost:8000/&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">docker-compose up
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="load-balancer-optional-1">Load Balancer (Optional)&lt;/h2>
&lt;p>Similarly, if this is hosted on a remote server, you will have to add the following with the load balancer of your choice.&lt;/p>
&lt;h4 id="apache-httpd-1">Apache HTTPD&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-apache" data-lang="apache">&lt;span style="color:#f92672">&amp;lt;VirtualHost&lt;/span> &lt;span style="color:#e6db74">*:80&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
ProxyPreserveHost &lt;span style="color:#66d9ef">On&lt;/span>
RequestHeader set X-Forwarded-Proto &lt;span style="color:#e6db74">&amp;#34;https&amp;#34;&lt;/span>
ProxyPass / http://127.0.0.1:8000/
ProxyPassReverse / http://127.0.0.1:8000/
&lt;span style="color:#f92672">&amp;lt;/VirtualHost&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="nginx-1">NGINX&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="color:#66d9ef">server&lt;/span> {
&lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span>;
&lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">drone.example.com&lt;/span>;
&lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/&lt;/span> {
&lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">X-Forwarded-For&lt;/span> $remote_addr;
&lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">X-Forwarded-Proto&lt;/span> $scheme;
&lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">Host&lt;/span> $http_host;
&lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">http://127.0.0.1:8000&lt;/span>;
&lt;span style="color:#f92672">proxy_redirect&lt;/span> &lt;span style="color:#66d9ef">off&lt;/span>;
&lt;span style="color:#f92672">proxy_http_version&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">.1&lt;/span>;
&lt;span style="color:#f92672">proxy_buffering&lt;/span> &lt;span style="color:#66d9ef">off&lt;/span>;
&lt;span style="color:#f92672">chunked_transfer_encoding&lt;/span> &lt;span style="color:#66d9ef">off&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="usage-1">Usage&lt;/h2>
&lt;p>As mentioned, drone relies on docker not only for its installation but also running the CI itself. Each repository that you want to configure for drone should have to have a &lt;code>.drone.yml&lt;/code> file like below at the top level of the repository. &lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">pipeline&lt;/span>:
&lt;span style="color:#f92672">build&lt;/span>:
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">node:${NODE_VERSION}&lt;/span>
&lt;span style="color:#f92672">commands&lt;/span>:
- &lt;span style="color:#ae81ff">npm install&lt;/span>
- &lt;span style="color:#ae81ff">npm run test&lt;/span>
&lt;span style="color:#f92672">matrix&lt;/span>:
&lt;span style="color:#f92672">NODE_VERSION&lt;/span>:
- &lt;span style="color:#ae81ff">latest&lt;/span>
- &lt;span style="color:#e6db74">&amp;#34;7&amp;#34;&lt;/span>
- &lt;span style="color:#e6db74">&amp;#34;6&amp;#34;&lt;/span>
- &lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Few things to pay attention to in the sample file:&lt;/p>
&lt;ul>
&lt;li>&lt;code>image&lt;/code> - Drone supports any docker images available for download. You can look for available docker images at the Docker Hub.&lt;/li>
&lt;li>&lt;code>matrix&lt;/code> - Like the scenario above, you want to test the project in multiple environments but doesn&amp;rsquo;t want to retype most of the stuffs, you can use matrix as a variable to hold all the different versions you would like to run tests on.&lt;/li>
&lt;li>&lt;code>commands&lt;/code> - This is the list of commands to run for the test to take place. You should also include installation of project dependent packages (such as &lt;code>mvn install&lt;/code>, &lt;code>npm install&lt;/code>, &lt;code>bundle install&lt;/code> etc).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="personal-notes">Personal Notes&lt;/h2>
&lt;h4 id="mirrored-repositories">Mirrored Repositories&lt;/h4>
&lt;p>Currently from my own experimentation, adding new commits to mirrored repositories (which are read-only) that are mainly hosted elsewhere would not trigger drone to run CI. Therefore, if you were to run drone on your own server, you can either enable it directly with the origin of the repository mirror or push twice to 2 separate servers for every commit. I&amp;rsquo;m still looking for a solution for this so hopefully there&amp;rsquo;s a better way than that.&lt;/p>
&lt;h4 id="memory-issues">Memory issues&lt;/h4>
&lt;p>Some of these instances can take quite a bit of memory spaces to run. Personally, I am hosting this on a 256MB VPS squeezing it with a bunch of other stuffs I hosts. This actually causes an issue where the tests cannot be run properly. As seen &lt;a href="https://drone.binhong.me/binhong/LibrarySystem/3/3">here&lt;/a>, at the end of the &lt;code>build&lt;/code> log, it was just abruptly &amp;lsquo;Killed&amp;rsquo; and ended there and then with no further information. I am still working on investigating this but it is very likely due to the lack of remaining unused memory space on the VPS.&lt;/p>
&lt;h4 id="static-ip">Static IP&lt;/h4>
&lt;p>In case you are hosting this on a Raspberry Pi at home for personal use, you would want to set a static IP direction on your router. This would help make sure that when in your network, you can always connect to the device through the same IP.&lt;/p>
&lt;h4 id="nginx-2">NGINX&lt;/h4>
&lt;p>I did not go deep into either of the load balancers in here as I am currently working on a separate piece that will focus more onto the configuration and use of NGINX to hosting multiple domain names and &amp;lsquo;servers&amp;rsquo;. Keep a look out for that!&lt;/p>
&lt;hr>
&lt;h2 id="about-me">About me&lt;/h2>
&lt;p>I currently work at Apple Inc. on the role of Siri Language Engineer as an Independent Contractor through AdvantisGlobal. I spend a lot of my free time experimenting and building new things with technologies I find fun and interesting. Follow my exploration journey &lt;a href="https://binhong.me/blog">here&lt;/a> or on &lt;a href="https://github.com/binhonglee">GitHub&lt;/a>.&lt;/p>
&lt;hr>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://bryangilbert.com/post/devops/how-to-setup-gitea-ubuntu/">How to Setup Gitea on an Ubuntu Server&lt;/a> by &lt;a href="http://bryangilbert.com/">Bryan Gilbert&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.slideshare.net/appleboy/introduction-to-gitea-with-drone">Introduction to Gitea with Drone&lt;/a> by &lt;a href="https://www.slideshare.net/appleboy">Bo-Yi Wu&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;em>This article was originally published on &lt;a href="https://codeburst.io/hosting-your-own-git-server-with-gitea-fc3298aa15ce">codeburst.io&lt;/a>.&lt;/em>&lt;/p>
&lt;/blockquote></description></item><item><title>Getting started with Travis-CI</title><link>https://binhong.me/blog/2018-04-22-getting-started-with-travis-ci/</link><pubDate>Sun, 22 Apr 2018 00:00:00 -0800</pubDate><guid>https://binhong.me/blog/2018-04-22-getting-started-with-travis-ci/</guid><description>&lt;h2 id="what-is-ci-and-why-should-i-care-aboutit">What is CI and why should I care about it?&lt;/h2>
&lt;p>CI stands for Continuous Integration which as the name suggests, is an integrated tests that runs continuously on every time when someone pushes a commit (or mostly when opening a &lt;a href="https://help.github.com/articles/about-pull-requests/">Pull Request&lt;/a>).&lt;/p>
&lt;p>As for why is it important, it automates the whole testing modules. Ideally, you would still want to test your changes locally before pushing them to remote but in some occasion where you forgot or the program requires a lot more resources than your current machine can handle, CI comes in very handy. That aside, if your project happen to have people wanting to contribute code, a properly written test with CI will help you in reviewing the changes and ensuring that the contribution would not break the build.&lt;/p>
&lt;h2 id="why-travis-ci">Why Travis-CI?&lt;/h2>
&lt;p>There are plenty of CI tools out there (cricleCI, AppVeyor etc.) so why Travis-CI? The straightforward answer is that its the easiest one to get started with especially if you are already on GitHub. This is actually also one of its major drawback which is how tightly tied Travis-CI is onto GitHub. As far as I know, it is not possible to use Travis-CI outside of GitHub. That aside, if you host your projects on GitHub, that should be the least of your concern.&lt;/p>
&lt;h2 id="setup">Setup&lt;/h2>
&lt;p>First, sign up at &lt;a href="https://travis-ci.org/">their website&lt;/a>, link your GitHub account and enable it for the repository you would like to implement this. Do note that this is only for public repositories. If you would like to do this for a private repository instead, you will need to sign up for &lt;a href="https://docs.travis-ci.com/user/travis-ci-for-private/">Travis-CI Pro&lt;/a>.&lt;/p>
&lt;p>Create a file named &lt;code>.travis.yml&lt;/code> and add the first line with the programming language you used (unless its Android in which you would then write Android instead of Java).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">language&lt;/span>: &lt;span style="color:#ae81ff">java&lt;/span>
&lt;span style="color:#75715e"># (or cpp, android, node_js etc.)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, there’s also a possibility that running the test might require sudo access to the testing environment in which you would then add the following line above the &lt;code>language&lt;/code> line.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">sudo&lt;/span>: &lt;span style="color:#ae81ff">required&lt;/span>
&lt;span style="color:#f92672">language&lt;/span>: &lt;span style="color:#ae81ff">cpp&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="testing-environment">Testing environment&lt;/h2>
&lt;p>Ideally, you will only be testing it in one environment which means this will be a one liner of this.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">os&lt;/span>: &lt;span style="color:#ae81ff">linux&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, in most occasion, we will be testing our software with a few different kinds of environment (at the time of writing, Travis-CI seems to only Ubuntu and OSX as seen &lt;a href="https://docs.travis-ci.com/user/reference/overview/">here&lt;/a>). Sometimes, 2 lines is enough.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">os&lt;/span>:
- &lt;span style="color:#ae81ff">linux&lt;/span>
- &lt;span style="color:#ae81ff">osx&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But more time than not, you need complicated configuration for each one of them (especially when it comes to C++ projects).&lt;/p>
&lt;p>Here is how the environment configuration for &lt;a href="https://github.com/binhonglee/TicketingSystem/blob/master/.travis.yml">one of my projects&lt;/a> looks like (shortened):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">matrix&lt;/span>:
&lt;span style="color:#f92672">include&lt;/span>:
- &lt;span style="color:#f92672">os&lt;/span>: &lt;span style="color:#ae81ff">linux&lt;/span>
&lt;span style="color:#f92672">addons&lt;/span>:
&lt;span style="color:#f92672">apt&lt;/span>:
&lt;span style="color:#f92672">sources&lt;/span>:
- &lt;span style="color:#ae81ff">ubuntu-toolchain-r-test&lt;/span>
&lt;span style="color:#f92672">packages&lt;/span>:
- &lt;span style="color:#ae81ff">g++-7&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
- &lt;span style="color:#ae81ff">MATRIX_EVAL=&amp;#34;CC=gcc-7 &amp;amp;&amp;amp; CXX=g++-7&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">os&lt;/span>: &lt;span style="color:#ae81ff">osx&lt;/span>
&lt;span style="color:#f92672">osx_image&lt;/span>: &lt;span style="color:#ae81ff">xcode8&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
- &lt;span style="color:#ae81ff">MATRIX_EVAL=&amp;#34;brew update &amp;amp;&amp;amp; brew install gcc &amp;amp;&amp;amp; CC=gcc-7 &amp;amp;&amp;amp; CXX=g++-7&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="language-specificsettings">Language specific settings&lt;/h2>
&lt;p>For some languages, it is a lot more complicated than the others due to the way their versioning works.&lt;/p>
&lt;h3 id="android">Android&lt;/h3>
&lt;p>This is probably the most complicated one I’ve come across. It took a lot of tries and failure for me to figure out how it works. (&lt;a href="https://docs.travis-ci.com/user/languages/android/">The documentation&lt;/a> has also since updated which helps greatly.)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">android&lt;/span>:
&lt;span style="color:#f92672">components&lt;/span>:
- &lt;span style="color:#ae81ff">tools&lt;/span>
- &lt;span style="color:#ae81ff">platform-tools&lt;/span>
- &lt;span style="color:#ae81ff">build-tools-26.0.2&lt;/span>
- &lt;span style="color:#ae81ff">android-26&lt;/span>
- &lt;span style="color:#ae81ff">platform-tools&lt;/span>
- &lt;span style="color:#ae81ff">extra-android-support&lt;/span>
- &lt;span style="color:#ae81ff">extra-google-google_play_services&lt;/span>
- &lt;span style="color:#ae81ff">extra-google-m2repository&lt;/span>
- &lt;span style="color:#ae81ff">extra-android-m2repository&lt;/span>
- &lt;span style="color:#ae81ff">addon-google_apis-google-26&lt;/span>
- &lt;span style="color:#ae81ff">sys-img-armeabi-v7a-android-26&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="c">C++&lt;/h3>
&lt;p>There isn’t specific custom configuration available for C++ like for Android above but due to the nature of its complicated OS configuration, you will need to import the matrix from before into the system before installing anything that might be needed to run the test itself. Therefore you will need to add the following.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">before_install&lt;/span>:
- &lt;span style="color:#ae81ff">eval &amp;#34;${MATRIX_EVAL}&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="java">Java&lt;/h3>
&lt;p>For Java, due to the differences between OpenJDK, OracleJDK and also differences from versions to versions itself (shoutout to OracleJDK 9 &amp;amp; 10), you might want to test your software with every version available.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">jdk&lt;/span>:
- &lt;span style="color:#ae81ff">oraclejdk9&lt;/span>
- &lt;span style="color:#ae81ff">oraclejdk8&lt;/span>
- &lt;span style="color:#ae81ff">openjdk8&lt;/span>
- &lt;span style="color:#ae81ff">openjdk7&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="python">Python&lt;/h3>
&lt;p>Similarly, you can test your software or package against different versions of Python including the development versions.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">python&lt;/span>:
- &lt;span style="color:#e6db74">&amp;#34;2.7&amp;#34;&lt;/span>
- &lt;span style="color:#e6db74">&amp;#34;3.6&amp;#34;&lt;/span>
- &lt;span style="color:#e6db74">&amp;#34;3.6-dev&amp;#34;&lt;/span>
- &lt;span style="color:#e6db74">&amp;#34;pypy2.7&amp;#34;&lt;/span>
- &lt;span style="color:#e6db74">&amp;#34;pypy3.8&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>*Note: Due to recent changes, seems like &lt;code>3.7-dev&lt;/code>, &lt;code>3.8-dev&lt;/code>, and &lt;code>nightly&lt;/code> would not work as of now.&lt;/em>&lt;/p>
&lt;h3 id="nodejs">Node.js&lt;/h3>
&lt;p>Again, you might need to test your software with multiple versions or node.js except the differences between each version is not as drastic but there are a lot more versions comparatively.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">node_js&lt;/span>:
- &lt;span style="color:#e6db74">&amp;#34;node&amp;#34;&lt;/span>
- &lt;span style="color:#e6db74">&amp;#34;9&amp;#34;&lt;/span>
- &lt;span style="color:#e6db74">&amp;#34;8&amp;#34;&lt;/span>
- &lt;span style="color:#e6db74">&amp;#34;7&amp;#34;&lt;/span>
- &lt;span style="color:#e6db74">&amp;#34;6&amp;#34;&lt;/span>
- &lt;span style="color:#e6db74">&amp;#34;5&amp;#34;&lt;/span>
- &lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>
- &lt;span style="color:#e6db74">&amp;#34;lts/*&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By doing this, you will be testing your software towards possibly 8 versions of node.js.&lt;/p>
&lt;h2 id="install-and-runtest">Install and run test&lt;/h2>
&lt;p>If you look into the &lt;a href="https://docs.travis-ci.com/user/languages/">specific documentations&lt;/a> about the configurations for each languages, you will find that many of them has default &lt;code>install&lt;/code> and &lt;code>test&lt;/code> scripts but you can always overwrite them with your own scripts or commands like the following.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">before_install&lt;/span>:
- &lt;span style="color:#ae81ff">./beforeInstall.sh&lt;/span>
&lt;span style="color:#f92672">install&lt;/span>:
- &lt;span style="color:#ae81ff">./install.sh&lt;/span>
&lt;span style="color:#f92672">before_script&lt;/span>:
- &lt;span style="color:#ae81ff">./preTest.sh&lt;/span>
&lt;span style="color:#f92672">script&lt;/span>:
- &lt;span style="color:#ae81ff">./test.sh&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>*Note: if you testing in macOS environment and is installing any dependencies through Homebrew (including language dependencies in C++), you will have to do a &lt;code>brew update&lt;/code> before running anything brew related to prevent an error.&lt;/em>&lt;/p>
&lt;h2 id="deployment">Deployment&lt;/h2>
&lt;p>If you host your project externally while using your GitHub repository as your code control, Travis-CI can also help automating the deployment process. Depending on the service provider you use, their configuration can vary greatly from one another. Below, I included some of those that I think is the more popular ones. As you might have guessed, you can also deploy to multiple developers at once. I recommend checking out the &lt;a href="https://docs.travis-ci.com/user/deployment">documentation page&lt;/a> before implementing any of these.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">before_deploy&lt;/span>:
- &lt;span style="color:#ae81ff">./before_deployment&lt;/span>
&lt;span style="color:#f92672">deploy&lt;/span>:
- &lt;span style="color:#f92672">provider&lt;/span>: &lt;span style="color:#ae81ff">heroku&lt;/span>
&lt;span style="color:#f92672">api_key&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;YOUR_API_KEY&amp;#34;&lt;/span>
&lt;span style="color:#f92672">skip_cleanup&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>: &lt;span style="color:#ae81ff">production&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>:
- &lt;span style="color:#e6db74">&amp;#34;./deploy&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">provider&lt;/span>: &lt;span style="color:#ae81ff">pages&lt;/span>
&lt;span style="color:#f92672">github_token&lt;/span>: &lt;span style="color:#ae81ff">$GITHUB_TOKEN&lt;/span>
&lt;span style="color:#f92672">skip_cleanup&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>: &lt;span style="color:#ae81ff">production&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>:
- &lt;span style="color:#e6db74">&amp;#34;./deploy&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">provider&lt;/span>: &lt;span style="color:#ae81ff">npm&lt;/span>
&lt;span style="color:#f92672">api_key&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;YOUR_API_KEY&amp;#34;&lt;/span>
&lt;span style="color:#f92672">email&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;email@domain.com&amp;#34;&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>: &lt;span style="color:#ae81ff">production&lt;/span>
- &lt;span style="color:#f92672">provider&lt;/span>: &lt;span style="color:#ae81ff">elasticbeanstalk&lt;/span>
&lt;span style="color:#f92672">access_key_id&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;access-key-id&amp;gt;&lt;/span>
&lt;span style="color:#f92672">secret_access_key&lt;/span>:
&lt;span style="color:#f92672">secure&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Encypted &amp;lt;secret-access-key&amp;gt;&amp;#34;&lt;/span>
&lt;span style="color:#f92672">region&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;us-east-1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;your-app-name&amp;#34;&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;your-app-environment&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">provider&lt;/span>: &lt;span style="color:#ae81ff">pypi&lt;/span>
&lt;span style="color:#f92672">user&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;username&amp;#34;&lt;/span>
&lt;span style="color:#f92672">password&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;password&amp;#34;&lt;/span>
&lt;span style="color:#f92672">after_deploy&lt;/span>:
- &lt;span style="color:#ae81ff">./post_deployment&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="code-coverage">Code coverage&lt;/h2>
&lt;p>Along with testing, I would also recommend using a tool to analyze your code coverage. It will show you how much coverage your test has over your codes (and usually, use cases). Personally, I use the tool called &lt;a href="https://codecov.io/">codecov&lt;/a>.&lt;/p>
&lt;h2 id="add-thebadge">Add the badge!&lt;/h2>
&lt;p>If you are like me, the reason I was hooked up by this is because long time ago when I first got on GitHub, I saw plenty of repositories have the badge that shows if their build is &lt;code>passing&lt;/code> or &lt;code>failing&lt;/code>. I thought that was really fancy and wanted one of those so I started getting myself to learn what CI as a whole is about and how can I make use of it. Turns out, its a lot more useful than just being pretty!&lt;/p>
&lt;hr>
&lt;h2 id="about-me">About me&lt;/h2>
&lt;p>I currently work at Apple Inc. on the role of Siri Language Engineer as an Independent Contractor through AdvantisGlobal. I spend a lot of my free time experimenting and building new things with technologies I find fun and interesting. Follow my exploration journey &lt;a href="https://binhong.me/blog">here&lt;/a> or on &lt;a href="https://github.com/binhonglee">GitHub&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>This article was originally published on &lt;a href="https://codeburst.io/getting-started-with-travis-ci-f3223082f256">codeburst.io&lt;/a>.&lt;/em>&lt;/p>
&lt;/blockquote></description></item></channel></rss>