<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Ink Mortar</title><link>https://binhong.me/blog/</link><description>Recent content on The Ink Mortar</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 22 May 2021 00:00:00 -0800</lastBuildDate><atom:link href="https://binhong.me/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Ava with Vue (2.x) + TypeScript (and NYC)</title><link>https://binhong.me/blog/2021-05-22-ava-with-vue-typescript-and-nyc/</link><pubDate>Sat, 22 May 2021 00:00:00 -0800</pubDate><guid>https://binhong.me/blog/2021-05-22-ava-with-vue-typescript-and-nyc/</guid><description>When working on a project with Vue (TypeScript), I faced a lot of roadblocks trying to get code coverage to work. The issue is largely covered in this issue thread. Most solutions / workarounds for that seems to revolve around changing the bundling flow with webpack. Considering my lack of familiarity with webpack (on top of my use of scss and pug in Vue files), putting together a webpack config that works for me turns out to be extremely challenging.</description></item><item><title>Cross Language Object Parsing</title><link>https://binhong.me/blog/2020-08-09-cross-language-object-parsing/</link><pubDate>Sun, 09 Aug 2020 00:00:00 -0800</pubDate><guid>https://binhong.me/blog/2020-08-09-cross-language-object-parsing/</guid><description>I was working on a side project where I had the backend and frontend setup to run on different programming languages. As I was working on it, it started to bug me a little that I have to write the same object / struct and enum for each language in use everytime I introduce a new enum or struct. It can also be confusing / dangerous if I updated one side and forget to update the other.</description></item><item><title>Multi-language Support Build Tool</title><link>https://binhong.me/blog/2019-08-07-multi-language-support-build-tool/</link><pubDate>Wed, 07 Aug 2019 00:00:00 -0800</pubDate><guid>https://binhong.me/blog/2019-08-07-multi-language-support-build-tool/</guid><description>I recently started learning about Go to find out what’s all the hype about. So I figured what’s a better way than to build a project out of it? As I was setting up my machine and going through tutorials step-by-step, I was slightly annoyed by the fact that the development of Go projects are limited to inside the $GOPATH.
Personally, I have all my side projects stored at the top level of the computer.</description></item><item><title>Functional and flexible shell scripting tricks</title><link>https://binhong.me/blog/2019-05-07-shell-scripting/</link><pubDate>Tue, 07 May 2019 00:00:00 -0800</pubDate><guid>https://binhong.me/blog/2019-05-07-shell-scripting/</guid><description>Shell scripts vs python or perl Its 2019 now, who writes shell scripts anymore? Am I right? Well, apparently I do. ¯\_(ツ)_/¯
There are some good arguments for that here and here which mainly revolve around 2 things:
Shell exists in all Unix systems and makes use of system default features. Shell is an &amp;ldquo;interactive command function&amp;rdquo; designed to get user inputs during the process of running them. Also, here&amp;rsquo;s an additional relevant reading about the differences between sh and bash.</description></item><item><title>Test Driven Development with Alexa SDK</title><link>https://binhong.me/blog/2018-10-29-test-driven-development-with-alexa-sdk/</link><pubDate>Mon, 29 Oct 2018 00:00:00 -0800</pubDate><guid>https://binhong.me/blog/2018-10-29-test-driven-development-with-alexa-sdk/</guid><description>What is Test Driven Development? According to Wikipedia, it means “Requirements are turned into very specific test cases, then the software is improved to pass the new tests, only.” Basically, you would first have to write the test of the software/feature you are developing before you start working on the developing the software/feature itself.
Here are a few more articles on the benefits and why you should apply TDD:
Test Driven Development by Jan Olbrich Isn’t TDD twice the work?</description></item><item><title>How to host multiple domain names and projects on one server</title><link>https://binhong.me/blog/2018-08-29-how-to-host-multiple-domain-names-and-projects-on-one-server/</link><pubDate>Wed, 29 Aug 2018 00:00:00 -0800</pubDate><guid>https://binhong.me/blog/2018-08-29-how-to-host-multiple-domain-names-and-projects-on-one-server/</guid><description>I own multiple domain names, and each one hosts a different side project. For the longest time, everything that required ‘hosting’ was hosted on Heroku. But their free tier can be quite limited, it can also get costly quickly if you are paying for each separate project. So instead, I decided to explore putting all of them together using NGINX (recommended to me by Jane Manchun Wong).
Required Resources Virtual Private Server (VPS) You’ll need a virtual server such as DigitalOcean or EC2 by AWS.</description></item><item><title>Hosting your own Git server with Gitea</title><link>https://binhong.me/blog/2018-08-20-hosting-your-own-git-server-with-gitea/</link><pubDate>Mon, 20 Aug 2018 00:00:00 -0800</pubDate><guid>https://binhong.me/blog/2018-08-20-hosting-your-own-git-server-with-gitea/</guid><description>Most people (including myself) host their personal projects on a third-party free Git hosting websites like GitHub, GitLab, Bitbucket etc. While that is sufficient for most people, it is also pretty fun to have your own Git service hosted on your own domain name of choice. While I trust my fellow engineers at these companies, I am using this as a personally backup to those services if anything goes wrong (like GitLab.</description></item><item><title>Building a side project over the weekend</title><link>https://binhong.me/blog/2018-06-02-building-a-side-project-over-the-weekend/</link><pubDate>Sat, 02 Jun 2018 00:00:00 -0800</pubDate><guid>https://binhong.me/blog/2018-06-02-building-a-side-project-over-the-weekend/</guid><description>Few months ago during my job search, I decided that I want to add some new skills to my arsenal (resume) so I went ahead to build a bill splitting webapp (and the month before, an Alexa skill). Granted, the backend was built weeks before during a hackathon (shoutout to HackISU), I’m just focusing on building the UI that makes post requests to the backend. In the process, I also ended up fixing some inherent flaws I left behind in the backend.</description></item><item><title>Getting started with Travis-CI</title><link>https://binhong.me/blog/2018-04-22-getting-started-with-travis-ci/</link><pubDate>Sun, 22 Apr 2018 00:00:00 -0800</pubDate><guid>https://binhong.me/blog/2018-04-22-getting-started-with-travis-ci/</guid><description>What is CI and why should I care about it? CI stands for Continuous Integration which as the name suggests, is an integrated tests that runs continuously on every time when someone pushes a commit (or mostly when opening a Pull Request).
As for why is it important, it automates the whole testing modules. Ideally, you would still want to test your changes locally before pushing them to remote but in some occasion where you forgot or the program requires a lot more resources than your current machine can handle, CI comes in very handy.</description></item><item><title>RESTful API with Spark Kotlin</title><link>https://binhong.me/blog/2018-03-21-restful-api-with-spark-kotlin/</link><pubDate>Wed, 21 Mar 2018 00:00:00 -0800</pubDate><guid>https://binhong.me/blog/2018-03-21-restful-api-with-spark-kotlin/</guid><description>When speaking of building a backend API, the most common tools is either Spring Boot for Java or ExpressJS for JavaScript. Even for Kotlin, Spring Boot and JetBrain’s own ktor is the usual option to go with. But today I’ll explore into the less popular option of spark-kotlin.
Disclaimer : I am not in anyway affiliated nor do I work at the project. I just simply stumbled upon it and started using it when working on a side project.</description></item><item><title>Being lucky</title><link>https://binhong.me/blog/2018-02-10-being-lucky/</link><pubDate>Sat, 10 Feb 2018 00:00:00 -0800</pubDate><guid>https://binhong.me/blog/2018-02-10-being-lucky/</guid><description>Ah, you’ve graduated. Now what? Oh right, still no job offer! *panics*
As an international student, I have come across hundreds of guides on “how to land an interview”, “how to get a job”, “how to solve DSA questions” etc but almost none of them were specifically written with an international student in mind. I’m not here to dismiss the quality of such guides but rather, to be an add-on (or plugin if you will), to help international students understand their challenges better.</description></item><item><title>I could become you tomorrow and no one will know</title><link>https://binhong.me/blog/2017-11-20-i-could-become-you-tomorrow-and-no-one-would-find-out/</link><pubDate>Mon, 20 Nov 2017 00:00:00 -0800</pubDate><guid>https://binhong.me/blog/2017-11-20-i-could-become-you-tomorrow-and-no-one-would-find-out/</guid><description>Backstory I lied, but maybe someone else could. If you didn’t know already, Malaysia just suffered possibly its largest data breach ever with personal data of millions of Malaysians (including your full name, IC number, phone number and home address) up for grabs as long as the price is right. If you are not freaked out yet, you should be and I’ll tell you why. I don’t think many people understand how dangerous these data can be.</description></item><item><title>Use Terminal in Windows with Style</title><link>https://binhong.me/blog/2017-08-15-use-terminal-in-windows-with-style/</link><pubDate>Tue, 15 Aug 2017 00:00:00 -0800</pubDate><guid>https://binhong.me/blog/2017-08-15-use-terminal-in-windows-with-style/</guid><description>When the Linux Shell in Windows was first released, I used it and didn’t quite like it. Fast forward a year later, I heard it is a lot better now (also the fact that my familiarity with terminal commands improved helped) so I decided to give it another try. It is a really fun experience so far. In case you haven’t install the Windows Subsystem for Linux (WSL), follow this step-by-step guide by Microsoft to get started.</description></item></channel></rss>